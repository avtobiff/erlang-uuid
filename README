ERLANG UUID
===========

This module implements UUID v1, v3, v4, and v5 as of RFC 4122
(UUID variant 1 0).

UUID v1 return a UUID generated by a timestamp and node id.
UUID v3 return a UUID generated using MD5 and a given name within a namespace.
UUID v4 return a UUID generated by a (pseudo) random number generator.
UUID v5 return a UUID generated using SHA1 and a given name within a namespace.

Source tracking available at

    http://gitorious.org/avtobiff/erlang-uuid

To clone the main developing repository invoke

    git clone git://gitorious.org/avtobiff/erlang-uuid.git



BUILD AND INSTALL
-----------------
Build by invoking

    make

Install to default $ERL_ROOT (/usr/lib/erlang) by invoking

    sudo make install

Install to different $ERL_ROOT ($PREFIX/lib/erlang) by setting PREFIX

    sudo make PREFIX=/opt/erlang install

Include in your own project using Rebar. Add this to your rebar.config

    {uuid, ".*",
     {git, "git://gitorious.org/avtobiff/erlang-uuid.git", "master"}}


USE
---
Example of usage

    1> uuid:to_string(uuid:uuid1()).
    "f412e400-c445-1131-bdc6-03f9e757eb34"
    2> uuid:to_string(uuid:uuid3(dns, "fqdn.example.com")).
    "06eaa791-8c2e-3b0d-8a07-c80979fd1b98"
    3> uuid:to_string(uuid:uuid3(uuid:uuid4(), "my name")).
    "fcf82b93-aa5e-3d79-b95e-726420f89e1b"
    4> uuid:to_string(uuid:uuid4()).
    "79f492f8-1337-4200-abcd-92bada1cacao"
    5> uuid:to_string(uuid:uuid5(dns, "fqdn.example.com")).
    "8fd7fa87-4c20-5809-a1b0-e07f5c224f02"
    6> uuid:to_string(uuid:uuid5(uuid:uuid4(), "my name")).
    "6ff58b11-e0b2-536c-b6be-bdccd38836a2"


UUID v1
-------
UUID v1 uses the number of 100 nanosecond intervals since the west adopted the
gregorian calendar and the node id IEEE 802 (MAC) address. It is hackishly
implemented and improvements can be made.

Room for improvement:
* Timestamp resolution is one (1) second which should be improved.
* Clock sequence is random (simulating state is always unavailable).


UUID v3
UUID v5
-------
UUID v3 and UUID v5 uses MD5 and SHA1, respectivaly, to generate a UUID using a
name and a namespace as initializer. Valid namespaces are the atoms: url, dns,
oid, x500, nil or using a generated UUID either as a binary or as a UUID string
representation.


UUID v4
-------
UUID v4 uses randomness to create a UUID, the six version and variant bits are
set all the other 122 bits are randomly generated.


  Per Andersson <avtobiff@gmail.com>  Sat, 18 Feb 2012 03:40:29 +0100
